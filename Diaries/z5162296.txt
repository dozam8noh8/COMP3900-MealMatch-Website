
Week 1
The group was formed and a decision on the project (MealMatch) and tools to be used was made. I joined the team on Jira and the GitHub repository. In doing some research, I came across Recipeland and Foodwise, two other systems which have a functionality similar to our specs, and listed their pros and cons. I also attended the group meeting during which I helped come up with epics and smaller user stories.

Week 2
At the beginning of the week, I drew up draft storyboards, which I shared with the rest of the group. When we had our group meeting, we checked to ensure that all our user stories were covered. I noted down a few changes to be made and added the final storyboards to our proposal.

Week 3
This week I helped finished off our proposal for submission as we marked the start of our first sprint. I have been learning Angular as I go along and have thus been able to work on a core user story for Epic 2, which is the search for an ingredient by typing into a search bar. 
Our database has not been set up at this point so I placed dummy data in the frontend to produce a usable interface for the time being. Since this did not take as long as expected, I decided to start working on the addition and removal of ingredients from a user's input list. 
Next week I hope the API to our backend will be set up so that I can make calls to obtain data from our database.

Week 4 
At the beginning of this week, I found the external API Spoonacular, which seemed very useful for our needs. Since we wanted to store data in our own database, I thought maybe we could scrape from this API. I believed we should have a uniform idea throughout the team of the schemas we would store. So I drew up an ER diagram of what I had in mind and shared it with the group. A possible legal issue was brought to my attention by a team member which was that the Terms of Service of Spoonacular forbids any form of scrape and storing of their data. As a result, my team decided to find another external API to use. One thing I was unsure of was how we would store the instructions for our recipes. My initial thought was that if we could maintain the order of steps in our database, then it could be easily integrated with a user experience I had in mind for the editing of recipes. However, I think we decided to just go with a long string/varchar, at least for now.
I have also been looking into Angular more and recognised that I could improve some of my code from last week, making it more decoupled. I refactored some of the implementation for recipe searching and list maintenance to utilise an Angular service. Additionally, I decided to pick up on another user story for Epic 2. On the frontend, I implemented ingredient browsing by category using the same service to ensure data is synchronised i.e. if an ingredient was searched and added to the list, it should also be checked off in the category component and vice versa.
I started learning about the HttpClient module and at the same time, the backend team had set up API endpoints to retrieve data from our database. As a result, I replaced the dummy data I had in the frontend with calls to our backend. 
I am now working on displaying the results of a search and the page for each recipe's details, which I hope to finish next week.

Week 5
This week as started to work on another user story for Epic 2 and that was the actual search functionality. Using an endpoint set up by our backend team, I was able to send a post request with a JSON body of all input ingredients and display the results. I then started to work on the page that displays recipe details. I find that it would make most sense to also have an endpoint that gets the details of a recipe when given an id. Since this had not been set up, I observed the backend code and added a simple endpoint, which may still be subject to some change. But at least for now, I was able to get data to display on the frontend. The UI at the moment is quite basic, but I hope it will be improved in the next sprint, along with a few other things for which I created subtasks under E2S5.
With our demo coming up, I shifted my attention back to the user stories I had already completed this sprint. I noticed that at times when an ingredient was selected, it wouldn't be added to the end of the list. I added a subtask under E2S2 but was able to quickly fix this. I also added another task which I believe could help improve UX and that is to ensure that the inputted ingredients are persisted in some way so that they don't disappear if the user refreshes the page or opens a new tab. This may require some more work and has not yet been completed.
We had a brief meeting with a few members of the team to see how everyone was going and what we could demo. It was suggested that our categories and ingredients could be displayed in a more relevant order. For the time being, I made a quick adjustment in the back end to cater for this, but I think maybe it could be done in a better way. Since it takes a while for our API to return data, a team member suggested that perhaps we could have some dummy data in place initially. This would make our web app appear more responsive.
Another team member noticed that they could not go through the search autocompleted options using the keyboard. This would also improve UX and so I made a fix for that. I also ensured that the search is case insensitive and that some text would be displayed to indicate when the ingredient list is empty.
After our demo, which I think went quite well, we had our retrospective and then planned for the next sprint. In addition to continuing to work on search results and recipe details page, I will also be implementing the filtering of recipes by meal type.

Week 6
One thing that we agreed upon last week was that we should have better error-handling on the frontend such that users would be informed of if/when an API call fails. 
I wasn’t too sure of the right approach for this. I had read that HttpClient.get returns an Observable which could be subscribed to. The subscribe method could then take in two functions, one for the successful retrieval of data and the other in the event of an error. But I think I struggled with how this should be passed down to the ingredient search and ingredient by category component, since the get requests were called in a share service. 
I thought that this would be a good instance for me to ask for early feedback from other team members, which was the to-do I put down and assigned myself to. Whilst changes were made, at the time of writing, this issue has not been completely resolved yet.
Another thing I noticed from my work last sprint was that after pressing back to results from a recipe page, the results would disappear. I think the issue was that I was calling the search API endpoint in ngOnInit. This initialiser and the constructor seem to be called every time a page is appears in view and so by pressing back (as opposed to submitting a query from the home page), no search ingredients are passed in for results to be returned. I think I have been able to fix this by adding a search service which would persist the results from the last search.
I've also managed to get the filtering of recipes by meal type to work. What this required was maintaining a property mealType and just ensuring that only recipes that pertain to this meal type are displayed. I made sure that this property could also be set alongside a user’s input ingredient list, if they choose to do so.