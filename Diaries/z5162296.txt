
Week 1
The group was formed and a decision on the project (MealMatch) and tools to be used was made. I joined the team on Jira and the GitHub repository. In doing some research, I came across Recipeland and Foodwise, two other systems which have a functionality similar to our specs, and listed their pros and cons. I also attended the group meeting during which I helped come up with epics and smaller user stories.

Week 2
At the beginning of the week, I drew up draft storyboards, which I shared with the rest of the group. When we had our group meeting, we checked to ensure that all our user stories were covered. I noted down a few changes to be made and added the final storyboards to our proposal.

Week 3
This week I helped finished off our proposal for submission as we marked the start of our first sprint. I have been learning Angular as I go along and have thus been able to work on a core user story for Epic 2, which is the search for an ingredient by typing into a search bar. 
Our database has not been set up at this point so I placed dummy data in the frontend to produce a usable interface for the time being. Since this did not take as long as expected, I decided to start working on the addition and removal of ingredients from a user's input list. 
Next week I hope the API to our backend will be set up so that I can make calls to obtain data from our database.

Week 4 
At the beginning of this week, I found the external API Spoonacular, which seemed very useful for our needs. Since we wanted to store data in our own database, I thought maybe we could scrape from this API. I believed we should have a uniform idea throughout the team of the schemas we would store. So I drew up an ER diagram of what I had in mind and shared it with the group. A possible legal issue was brought to my attention by a team member which was that the Terms of Service of Spoonacular forbids any form of scrape and storing of their data. As a result, my team decided to find another external API to use. One thing I was unsure of was how we would store the instructions for our recipes. My initial thought was that if we could maintain the order of steps in our database, then it could be easily integrated with a user experience I had in mind for the editing of recipes. However, I think we decided to just go with a long string/varchar, at least for now.
I have also been looking into Angular more and recognised that I could improve some of my code from last week, making it more decoupled. I refactored some of the implementation for recipe searching and list maintenance to utilise an Angular service. Additionally, I decided to pick up on another user story for Epic 2. On the frontend, I implemented ingredient browsing by category using the same service to ensure data is synchronised i.e. if an ingredient was searched and added to the list, it should also be checked off in the category component and vice versa.
I started learning about the HttpClient module and at the same time, the backend team had set up API endpoints to retrieve data from our database. As a result, I replaced the dummy data I had in the frontend with calls to our backend. 
I am now working on displaying the results of a search and the page for each recipe's details, which I hope to finish next week.